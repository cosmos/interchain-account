syntax = "proto3";

package intertx;

option go_package = "github.com/cosmos/interchain-accounts/x/inter-tx/types";

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

// Msg defines the ica-authentication Msg service.
service Msg {
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);
  // SubmitTx defines a rpc handler for MsgSubmitTx
  rpc SubmitTx(MsgSubmitTx) returns (MsgSubmitTxResponse);
}

// MsgRegisterAccount registers an interchain account for the given owner over the specified connection
message MsgRegisterAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string owner                      = 1;
  string connection_id              = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
}

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSubmitTx creates and submits an arbitrary transaction msg to be executed using an interchain account 
message MsgSubmitTx {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string owner                       = 1;
  string interchain_account          = 2 [(gogoproto.moretags) = "yaml:\"interchain_account\""];
  google.protobuf.Any msg            = 3;
}

// MsgSubmitTxResponse defines the MsgSubmitTx response type
message MsgSubmitTxResponse {}