syntax = "proto3";

package intertx;

option go_package = "github.com/cosmos/interchain-accounts/x/inter-tx/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

// Msg defines the ica-authentication Msg service.
service Msg {
  // Register defines a rpc handler for MsgRegisterAccount
  rpc RegisterAccount(MsgRegisterAccount) returns (MsgRegisterAccountResponse);
  // Send defines a rpc handler for MsgSend
  rpc Send(MsgSend) returns (MsgSendResponse);
  // Delegate to host a chain validator using an interchain account
  rpc Delegate(MsgDelegate) returns (MsgDelegateResponse);
}

// MsgRegisterAccount registers an interchain account for the given owner over the specified connection pair
message MsgRegisterAccount {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string owner                      = 1;
  string connection_id              = 2 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string counterparty_connection_id = 3 [(gogoproto.moretags) = "yaml:\"counterparty_connection_id\""];
}

// MsgRegisterAccountResponse is the response type for Msg/RegisterAccount
message MsgRegisterAccountResponse {}

// MsgSend builds and then sends a banktypes.MsgSend to the interchain account associated with the given owner on the
// given connection pair. The interchain account on the host chain will execute the banktypes.MsgSend
message MsgSend {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   interchain_account              = 1 [(gogoproto.moretags) = "yaml:\"interchain_account\""];
  bytes    owner                           = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string   to_address                      = 3 [(gogoproto.moretags) = "yaml:\"interchain_account\""];
  repeated cosmos.base.v1beta1.Coin amount = 4
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  string connection_id              = 5 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string counterparty_connection_id = 6 [(gogoproto.moretags) = "yaml:\"counterparty_connection_id\""];
}

// MsgSendResponse defines the Msg/Send response type.
message MsgSendResponse {}

// MsgDelegate builds and sends a stakingtypes.MsgDelegate to the interchian account associated with the provided owner and connection pair
// The interchain account on the associated host chain will execute the stakingtypes.MsgDelegate
message MsgDelegate {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string   interchain_account       = 1 [(gogoproto.moretags) = "yaml:\"interchain_account\""];
  bytes    owner                    = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  string   validator_address        = 3 [(gogoproto.moretags) = "yaml:\"validator_address\""];
  cosmos.base.v1beta1.Coin amount   = 4 [(gogoproto.nullable) = false];
  string connection_id              = 5 [(gogoproto.moretags) = "yaml:\"connection_id\""];
  string counterparty_connection_id = 6 [(gogoproto.moretags) = "yaml:\"counterparty_connection_id\""];
}

// MsgDelegateResponse defines the Msg/Delegate response type
message MsgDelegateResponse {}